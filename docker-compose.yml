services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: mlabs_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    container_name: app-server
    environment:
      DATABASE_URL: postgresql://postgres:postgres123@db:5432/mlabs_db
      FLASK_ENV: development
      FLASK_DEBUG: 1
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONUNBUFFERED: 1
    ports:
      - "5143:5143"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./server:/app
    restart: unless-stopped
    command: python -m flask --app app.main run --host=0.0.0.0 --port=5143 --debug --reload
    networks:
      - app-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: app-client
    env_file:
      - ./client/.env
    ports:
      - "3000:3000"
    depends_on:
      - server
    restart: unless-stopped
    volumes:
      - ./client:/app
    networks:
      - app-network

  ollama:
    image: ollama/ollama:latest
    container_name: app-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
    networks:
      - app-network

  nginx:
    container_name: app-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - server
    networks:
      - app-network

volumes:
  postgres_data:
  ollama_data:

networks:
  app-network:
    driver: bridge
